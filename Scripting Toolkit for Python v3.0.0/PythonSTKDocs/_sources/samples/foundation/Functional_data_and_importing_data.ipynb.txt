{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Functional data and importing data\n",
    "\n",
    "Export tensile stress-strain data from the MI_Training database, and fit a curve to the exported data. Create a new record using parameter values extracted from the fitted curve, and upload this record to the database.\n",
    "\n",
    "This example demonstrates:\n",
    "\n",
    "- Browsing for records\n",
    "- Extracting functional data from a Granta MI database\n",
    "- Importing a new record to a Granta MI database\n",
    "\n",
    "## Create a Granta MI Session\n",
    "\n",
    "Import the GRANTA_MIScriptingToolkit package, and create a connection to a Granta MI server."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:18.596380Z",
     "iopub.status.busy": "2022-05-10T22:27:18.596380Z",
     "iopub.status.idle": "2022-05-10T22:27:19.036160Z",
     "shell.execute_reply": "2022-05-10T22:27:19.036160Z"
    }
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "import GRANTA_MIScriptingToolkit as gdl\n",
    "\n",
    "session = gdl.GRANTA_MISession('http://localhost/mi_servicelayer', autoLogon=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Browse for records\n",
    "\n",
    "Browse for a record located within the Tensile Statistical Data table in the MI_Training database.\n",
    "\n",
    "Set the folder path for the record to browse to as: High Alloy Steel / AMS 6520 / Plate / Room Temperature 째F."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:19.036160Z",
     "iopub.status.busy": "2022-05-10T22:27:19.036160Z",
     "iopub.status.idle": "2022-05-10T22:27:19.046258Z",
     "shell.execute_reply": "2022-05-10T22:27:19.046258Z"
    }
   },
   "outputs": [],
   "source": [
    "dbKey = 'MI_Training'\n",
    "table = 'Tensile Statistical Data'\n",
    "folderPath = \"\"\"High Alloy Steel/AMS 6520/Plate/Room Temperature 째F\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get the root node of the table of interest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:19.046258Z",
     "iopub.status.busy": "2022-05-10T22:27:19.046258Z",
     "iopub.status.idle": "2022-05-10T22:27:19.296220Z",
     "shell.execute_reply": "2022-05-10T22:27:19.296220Z"
    }
   },
   "outputs": [],
   "source": [
    "tableReference = gdl.TableReference(DBKey = dbKey, name = table)\n",
    "treeRecord = session.browseService.GetRootNode(gdl.GetRootNode(tableReference)).rootNode"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the record of interest, *AMS 6520, Plate, Room Temperature 째F*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:19.296220Z",
     "iopub.status.busy": "2022-05-10T22:27:19.296220Z",
     "iopub.status.idle": "2022-05-10T22:27:20.226219Z",
     "shell.execute_reply": "2022-05-10T22:27:20.226219Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found treeRecord: High Alloy Steel\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found treeRecord: AMS 6520\n",
      "Found treeRecord: Plate\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found treeRecord: Room Temperature 째F\n"
     ]
    }
   ],
   "source": [
    "folders = folderPath.split('/')\n",
    "\n",
    "for folder in folders:\n",
    "    treeRecords = session.browseService.GetChildNodes(gdl.GetChildNodes(parent=treeRecord.recordReference)).treeRecords\n",
    "    treeRecord = next((r for r in treeRecords if r.shortName == folder), None)\n",
    "    if treeRecord:\n",
    "        print(\"Found treeRecord: {0}\".format(treeRecord.shortName))\n",
    "    else:\n",
    "        print(\"Unable to find folder: {0}\".format(folder))\n",
    "        sys.exit()\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exporting data\n",
    "\n",
    "Export *Tensile Response (11 axis)* data from the record of interest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:20.226219Z",
     "iopub.status.busy": "2022-05-10T22:27:20.226219Z",
     "iopub.status.idle": "2022-05-10T22:27:20.676219Z",
     "shell.execute_reply": "2022-05-10T22:27:20.676219Z"
    }
   },
   "outputs": [],
   "source": [
    "attribute = 'Tensile Response (11 axis)'\n",
    "\n",
    "partialTableRef = gdl.PartialTableReference(tableName = table)\n",
    "attrRef = gdl.AttributeReference(name = attribute, DBKey = dbKey, partialTableReference = partialTableRef)\n",
    "request = gdl.GetRecordAttributesByRefRequest(recordReferences = [treeRecord.recordReference], attributeReferences = [attrRef])\n",
    "\n",
    "data = session.dataExportService.GetRecordAttributesByRef(request).recordData[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check the data type of the *Tensile Response (11 axis)* attribute is FLOAT_FUNCTIONAL_SERIES."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:20.676219Z",
     "iopub.status.busy": "2022-05-10T22:27:20.676219Z",
     "iopub.status.idle": "2022-05-10T22:27:20.686220Z",
     "shell.execute_reply": "2022-05-10T22:27:20.686220Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Attribute Name: Tensile Response (11 axis), Type FLOAT_FUNCTIONAL_SERIES\n"
     ]
    }
   ],
   "source": [
    "value = data.attributeValues[0]\n",
    "print(\"Attribute Name: {0.attributeName}, Type {0.dataType}\".format(value))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Extract the data from each curve into a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:20.686220Z",
     "iopub.status.busy": "2022-05-10T22:27:20.686220Z",
     "iopub.status.idle": "2022-05-10T22:27:20.696218Z",
     "shell.execute_reply": "2022-05-10T22:27:20.696218Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[0.0, 0.884463, 0.889755, 0.890251, 0.890748, 0.891246, 0.922673, 0.937986, 0.96068, 0.986228, 1.00829, 1.02755, 1.0414, 1.05956, 1.07409, 1.08701, 1.11642, 1.14737, 1.17464, 1.20351, 1.23038], [0.0, 1731.86, 1733.01, 1733.87, 1734.72, 1735.58, 1786.9, 1809.62, 1840.22, 1870.26, 1892.73, 1910.05, 1921.33, 1934.84, 1944.71, 1952.89, 1969.64, 1984.99, 1996.96, 2008.33, 2017.92]]]\n"
     ]
    }
   ],
   "source": [
    "graph = value.floatFunctionalSeriesDataType.graph\n",
    "series = graph.series\n",
    "\n",
    "curves = []\n",
    "\n",
    "for curve in series:\n",
    "    points = curve.XYPoints.XYPoints\n",
    "    x = [point.parameterValue.numericValue for point in points]\n",
    "    y = [point.Y for point in points]\n",
    "    curves.append([x,y])\n",
    "    \n",
    "print(curves)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the curves using the matplotlib package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:20.696218Z",
     "iopub.status.busy": "2022-05-10T22:27:20.696218Z",
     "iopub.status.idle": "2022-05-10T22:27:21.606280Z",
     "shell.execute_reply": "2022-05-10T22:27:21.606280Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x_label = '{param.name} ({param.unit.unitSymbol})'.format(param = graph.XAxisParameter)\n",
    "y_label = 'Tensile stress 10^6 (Pa)'\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "ax.set_xlabel(x_label)\n",
    "ax.set_ylabel(y_label)\n",
    "ax.set_title('Tensile Response (11 axis)')\n",
    "\n",
    "for curve in curves:\n",
    "    ax.plot(curve[0], curve[1])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit a Ramberg-Osgood function to the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:21.606280Z",
     "iopub.status.busy": "2022-05-10T22:27:21.606280Z",
     "iopub.status.idle": "2022-05-10T22:27:22.196281Z",
     "shell.execute_reply": "2022-05-10T22:27:22.196281Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1acb674cf10>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import leastsq\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "def ramberg_osgood(p, stress):\n",
    "    return (stress/p[0])*(1.0 + p[1]*(stress/p[2])**(p[3]-1))\n",
    "\n",
    "\n",
    "def error_function(p, stress, strain):\n",
    "    return ramberg_osgood(p, stress) - strain\n",
    "\n",
    "\n",
    "strain = 0.01 * np.array(curves[0][0])\n",
    "stress = np.array(curves[0][1])\n",
    "\n",
    "p0 = (2.0e5, 0.0, 1.0, 24.0)\n",
    "\n",
    "plsq = leastsq(error_function, p0[:], args=(stress, strain))\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "ax.set_xlabel(x_label)\n",
    "ax.set_ylabel(y_label)\n",
    "\n",
    "ax.plot(ramberg_osgood(plsq[0], stress), stress, label='Fit')\n",
    "ax.plot(strain, stress, marker='o', linestyle=' ', label='Data')\n",
    "\n",
    "ax.set_title('Ramberg-Osgood fit')\n",
    "ax.legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing data\n",
    "\n",
    "Create a new record using the attribute values for Young's modulus obtained from the fitted curve, and import this record into the database.\n",
    "\n",
    "Identify the folder to upload the new record to. Browse the record tree to get the record reference for that folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:22.196281Z",
     "iopub.status.busy": "2022-05-10T22:27:22.196281Z",
     "iopub.status.idle": "2022-05-10T22:27:22.656287Z",
     "shell.execute_reply": "2022-05-10T22:27:22.656287Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found treeRecord folder: High Alloy Steel\n",
      "Found treeRecord folder: AMS 6520\n"
     ]
    }
   ],
   "source": [
    "importDBKey = 'MI_Training'\n",
    "importTableName = 'Tensile Statistical Data'\n",
    "importFolderPath = \"\"\"High Alloy Steel/AMS 6520\"\"\"\n",
    "importRecordName = 'AMS 6520 - With Fitted Data'\n",
    "\n",
    "importFolders = importFolderPath.split('/')\n",
    "\n",
    "importTableReference = gdl.TableReference(DBKey = importDBKey, name = importTableName)\n",
    "treeRecord = session.browseService.GetRootNode(gdl.GetRootNode(table = importTableReference)).rootNode\n",
    "\n",
    "for folder in importFolders:\n",
    "    treeRecords = session.browseService.GetChildNodes(gdl.GetChildNodes(parent=treeRecord.recordReference)).treeRecords\n",
    "    treeRecord = next((r for r in treeRecords if r.shortName == folder), None)\n",
    "    if treeRecord:\n",
    "        print(\"Found treeRecord folder: {0}\".format(treeRecord.shortName))\n",
    "    else:\n",
    "        print(\"Unable to find import folder: {0}\".format(folder))\n",
    "        sys.exit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the record attribute to include in the new record."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:22.656287Z",
     "iopub.status.busy": "2022-05-10T22:27:22.656287Z",
     "iopub.status.idle": "2022-05-10T22:27:22.676286Z",
     "shell.execute_reply": "2022-05-10T22:27:22.676286Z"
    }
   },
   "outputs": [],
   "source": [
    "modulusAttributeReference = gdl.AttributeReference(\n",
    "    name = \"Young's Modulus (11-axis)\",\n",
    "    DBKey = importDBKey,\n",
    "    partialTableReference = gdl.PartialTableReference(tableName = importTableName)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set values and units for the attributes of the new record."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:22.676286Z",
     "iopub.status.busy": "2022-05-10T22:27:22.676286Z",
     "iopub.status.idle": "2022-05-10T22:27:22.696291Z",
     "shell.execute_reply": "2022-05-10T22:27:22.696291Z"
    }
   },
   "outputs": [],
   "source": [
    "fittedEValue = plsq[0][0]\n",
    "modulusValue = gdl.PointValueWithParameters(value = fittedEValue)\n",
    "\n",
    "modulusPointValue = gdl.PointDataType(unitSymbol = 'psi', points = [modulusValue])\n",
    "\n",
    "importModulusValue = gdl.ImportAttributeValue(attributeReference = modulusAttributeReference, pointDataValue = modulusPointValue)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a reference to the subset that the new record will be added to."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:22.696291Z",
     "iopub.status.busy": "2022-05-10T22:27:22.696291Z",
     "iopub.status.idle": "2022-05-10T22:27:22.706287Z",
     "shell.execute_reply": "2022-05-10T22:27:22.706287Z"
    }
   },
   "outputs": [],
   "source": [
    "subsetReference = gdl.SubsetReference(\n",
    "    name = 'Statistical Test Data',\n",
    "    DBKey = importDBKey,\n",
    "    partialTableReference = gdl.PartialTableReference(tableName = importTableName)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import the record to the Granta MI database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-10T22:27:22.706287Z",
     "iopub.status.busy": "2022-05-10T22:27:22.706287Z",
     "iopub.status.idle": "2022-05-10T22:27:23.701974Z",
     "shell.execute_reply": "2022-05-10T22:27:23.701974Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Imported record AMS 6520 - With Fitted Data to Granta MI database\n"
     ]
    }
   ],
   "source": [
    "importRecord = gdl.ImportRecord(recordName = importRecordName,  \n",
    "                                existingRecord = treeRecord.recordReference,  \n",
    "                                subsetReferences = [subsetReference],  \n",
    "                                importAttributeValues = [importModulusValue])\n",
    "\n",
    "setRecordAttributesRequest = gdl.SetRecordAttributesRequest(importRecords = [importRecord])\n",
    "setRecordAttributesResponse = session.dataImportService.SetRecordAttributes(setRecordAttributesRequest)\n",
    "\n",
    "for record in setRecordAttributesResponse.recordsImported:\n",
    "    print (\"Imported record {0} to Granta MI database\".format(record.shortName))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
