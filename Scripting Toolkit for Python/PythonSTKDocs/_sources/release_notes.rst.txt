.. _release_notes:

What's new in Version 3.0
*************************

Key features introduced or improved in MI Scripting Toolkit for Python 3.0.

Streamlined API enhancements and bug fixes
==========================================

More consistent access to data across the MI Scripting Toolkit
--------------------------------------------------------------
This release includes a re-structure of several :class:`AttributeValue` classes, which simplifies data access by uniformly
adopting the ``.value`` property. :class:`AttributeValue.value` now returns data for point, functional, tabular, binary and
hyperlink attributes where previously the property either did not exist, or returned an instance of the class itself.

To further improve usability, :class:`AttributePoint.value` and :class:`AttributeDiscrete.value` now return a single value
for single-valued attributes and a list of values for multi-valued attributes.

Use datetime pseudo-attributes in search criteria
-------------------------------------------------
:class:`Record` pseudo-attributes ``modifiedDate``, ``createdDate`` and ``releasedDate`` now return time as well as date.
These pseudo-attributes can be searched, and will affect the ``min_max`` property.

Example data analytics scripts
------------------------------
As well as example scripts for common operations using the Streamlined and Foundation APIs, the MI Scripting Toolkit now
includes :ref:`data_analytics<Data Analytics example scripts>`. 

The new scripts cover:

* Plotting and comparing data from records.
* Processing datasets and importing calculated values.
* Fitting series data to linear and non-linear models.
* Creating statistical summaries (roll-ups) for groups of records or functional attributes.
* Comparing test data to specification values.
* Finding the area under a curve.

Additional fixes
----------------

* Added tabular data options to improve performance:
   * To only export and process tabular data relevant to your script, set individual columns in an :class:`AttributeDefinitionTabular` object to be ignored.
   * Ignore linked records when fetching and processing tabular data. The linked values are still exported, but the linked records are not.
* Records can now be removed from all subsets at once by setting :attr:`Record.subsets` to empty.
* The password for a session is now stored on the :obj:`Session` object, allowing it to persist for the entirety of the script.
* Fixed an issue where ``search_for_records_where()`` with date criteria incorrectly returned no results.
* You can now specify whether ``bulk_link_fetch()`` fetches records based on the current table's named subsets, or does not filter on subsets at all.


Foundation API enhancements and bug fixes
=========================================

* The Foundation API has been updated to use MI Service Layer Interface 20/05, this requires Granta MI 2021 R1 or newer.
* Standard names are now returned in :class:`GRANTA_MIScriptingToolkit.GetRecordAttributesByRef` responses.
* :class:`GRANTA_MIScriptingToolkit.GetAttributeDetails` now only returns minimum and maximum values if they exist.
* :meth:`GRANTA_MISession.TestConnection()` now errors if an invalid access or refresh token is provided.


Backwards incompatible API changes
==================================
This major release of MI Scripting Toolkit uses a later version of the Service Layer Interface than previous releases. Granta MI 2021 R1 
or later is now required.

Scripts written for Version 2.3 or earlier will need to be modified to take into account the following changes:

* Passwords are now stored on :class:`Session`. The new ``stored_password`` option is required for bulk operations.
* :attr:`AttributeValue.value` behavior of multiple attribute types has changed, and :attr:`AttributePoint.points` has been deprecated.

Scripts written for Version 2.0 or earlier may need to account for additional changes.

See the :ref:`upgrading` page for full details of breaking changes across all versions, or any pending deprecations.